instruction_rights = 
["DeclarationList",
"Declaration DeclarationList",
"",
"DeclarationInitial DeclarationPrime",
"TypeSpecifier #save_type ID #save_id", 
"FunDeclarationPrime",
"VarDeclarationPrime",
"; #define_var",
"[ NUM #define_arr ] ;",
"( #define_func Params ) CompoundStmt #end_func_body",
"int",
"void",
"int #save_type ID #save_id ParamPrime ParamList",
"void",
", Param ParamList",
"",
"DeclarationInitial ParamPrime",
"[ #define_param_arr]",
"#define_param_var",
"{ DeclarationList StatementList }",
"Statement StatementList",
"",
"ExpressionStmt",
"CompoundStmt",
"SelectionStmt",
"IterationStmt",
"ReturnStmt",
"Expression ;",
"break ;",
";",
"if ( Expression ) Statement else Statement",
"while ( Expression ) Statement",
"return ReturnStmtPrime #return_control",
";",
"Expression #set_return_value ;",
"SimpleExpressionZegond",
"ID #save_id B",
"= Expression #assign",
"[ Expression ] #save_index_address H",
"SimpleExpressionPrime",
"= Expression #assign_arr",
"#save_index_value G D C",
"AdditiveExpressionZegond C",
"AdditiveExpressionPrime C",
"Relop AdditiveExpression",
"",
"<",
"==",
"Term D",
"TermPrime D",
"TermZegond D",
"Addop #save_addop Term #add_sub D",
"",
"+",
"-",
"SignedFactor G",
"SignedFactorPrime G",
"SignedFactorZegond G",
"* SignedFactor #mult G",
"",
"+ Factor",
"- Factor",
"Factor",
"FactorPrime",
"+ Factor",
"- Factor",
"FactorZegond",
"( Expression )",
"ID #save_id VarCallPrime",
"NUM",
"( #start_call Args ) #end_func_call",
"VarPrime",
"[ Expression ] #save_index_address #save_index_value",
"#push_id_value",
"( #start_call Args ) #end_func_call",
"#push_id_value",
"( Expression )",
"NUM",
"ArgList",
"",
"Expression ArgListPrime",
", Expression ArgListPrime",
""]